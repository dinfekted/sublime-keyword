{

  "python.import": {
    "place": "(?<!\\.)import\\s.*((?<=[,\\\\])\n)*.*\n",
    "new_place": "^",
    "definition": {
      "expression": "([\\w\\.]+)",
      "scope": "source(?!.*keyword)",
      "nesting": true,
    },
    "delete": "token",
    "cleanup": true,
    "snippets": [{
        "contents": "import $value",
      }, {
        "contents": "from $word0 import $word1",
        "context": [
          {"key": "line", "operator": "regex_contains", "operand": "\\w+\\s+\\w+"}
        ],
      }, {
        "contents": "$value",
        "context": [
          {"key": "line", "operator": "regex_contains",
            "operand": "^\\s*(from|import)"}
        ],
      }
    ],
    "search": "\n(from\\s*[\\w+\\.]+\\s*import (\\w+))",
    "aliases": {
      "path": "from os import path"
    }
  },

  // "ruby.instance_variable": {
  //   "place": "\n(\\s*)def initialize[\\s\\S]+\\1end",
  //   "definition": "(@\\w+)\\s*=",
  //   "new_place": "def\\s*initialize",
  // },

  "php.use": {
    "place": "(?<=\n)use .*?\n",
    "new_place": {
      "new_lines": true,
      "expression": "^<\\?(?:php)?[ \t]*\n\n(?:\\s*namespace.*?;\n)?()",
      "start": "end",
    },
    "new_place_fallback": {
      "command": "insert_text",
      "args": {
        "point": 0,
        "text": "<?php\n\n\n?>\n",
      }
    },
    "definition": {
      "expression": "([\\\\\\w]+)",
      "short": "(\\w+)$",
      "scope": "source(?!.*keyword)",
      "nesting": true,
    },
    "delete": "token",
    "cleanup": true,
    "snippets": [{
      "contents": "use $value;",
    }],
    "search": "\n\\s*(use .*?\\\\(\\w+);)",
    "aliases": {

    }
  },

  "php.property": {
    "place": "private \\$(\\w+);",
    "new_place": {
      "new_line": true,
      "at_cursor": true,
      "expression": "(trait|class).*{\n",
      "start": "end",
      "backward": true,
      "nesting": false,
    },
    "definition": {
      "expression": "(\\w+)",
      "scope": "source(?!.*property)",
    },
    "delete": "token",
    "cleanup": false,
    "snippets": [{
      "contents": "\tprivate \\$$value;",
    }],
    "search": "\n\\s*(private \\$(\\w+);)",
    "aliases": {

    }
  },

  // "php.instance_variable": {
  //   "place": "class[\\s\\S]*function",
  //   "new_place": "class",
  //   "definition": "(?:public|protected|private)\\s*(\\$\\w+)",
  // }

}